// Generated by CoffeeScript 1.3.3

/*
Logic/Computer Game Code
Copyright (c) 2012 Indiven LLC

MIT License
*/


(function() {
  var Accumulator, ArrayBuilder, ConsoleLogger, CurvedWire, D_DOWN, D_LEFT, D_RIGHT, D_UP, DuhWinning, Packet, PacketGenerator, PacketHandlerTrait, Part, SPRITES, StraightWire, WireFactory, oppositeDir,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Packet = window.Packet;

  Part = window.Part;

  oppositeDir = window.oppositeDir;

  D_UP = window.D_UP;

  D_DOWN = window.D_DOWN;

  D_LEFT = window.D_LEFT;

  D_RIGHT = window.D_RIGHT;

  SPRITES = window.SPRITES;

  PacketHandlerTrait = {
    tick: function(t) {
      this.handlePackets();
      this.packets = this.packets.concat(this.packetQueue);
      return this.packetQueue = [];
    }
  };

  StraightWire = (function(_super) {

    __extends(StraightWire, _super);

    StraightWire.use(PacketHandlerTrait);

    StraightWire.spriteCodes = [SPRITES.wire_up, SPRITES.wire_right, SPRITES.wire_down, SPRITES.wire_left];

    function StraightWire() {
      StraightWire.__super__.constructor.apply(this, arguments);
      this.inputs = [D_DOWN];
      this.outputs = [D_UP];
    }

    StraightWire.prototype.render = function(el) {
      el.text(String.fromCharCode(StraightWire.spriteCodes[this.orientation]));
      return el.css('color', this.packets.length > 0 || this.packetQueue.length > 0 ? '#0a0' : '#000');
    };

    StraightWire.prototype.handlePackets = function() {
      var b, pkt;
      while (this.packets.length > 0) {
        pkt = this.packets.shift();
        b = this.block.dir(this.outputs[0]);
        if ((b != null) && (b.part != null) && b.part.acceptsPacket(oppositeDir(this.outputs[0]), pkt)) {
          b.part.pushPacket(oppositeDir(this.outputs[0]), pkt);
        }
      }
      return true;
    };

    return StraightWire;

  })(Part);

  CurvedWire = (function(_super) {

    __extends(CurvedWire, _super);

    CurvedWire.spriteCodes = [SPRITES.wire_down_right, SPRITES.wire_left_down, SPRITES.wire_up_left, SPRITES.wire_right_up, SPRITES.wire_down_left, SPRITES.wire_left_up, SPRITES.wire_up_right, SPRITES.wire_right_down];

    function CurvedWire() {
      CurvedWire.__super__.constructor.apply(this, arguments);
      this.outputs = [D_RIGHT];
      this.mirrored = false;
      this.packets = [];
      this.packetQueue = [];
    }

    CurvedWire.prototype.render = function(el) {
      var i;
      i = this.orientation + (this.mirrored ? 4 : 0);
      el.text(String.fromCharCode(CurvedWire.spriteCodes[i]));
      return el.css('color', this.packets.length > 0 || this.packetQueue.length > 0 ? '#0a0' : '#000');
    };

    return CurvedWire;

  })(StraightWire);

  WireFactory = {
    downUp: function() {
      return new StraightWire();
    },
    leftRight: function() {
      return new StraightWire().setOrientation(D_RIGHT);
    },
    upDown: function() {
      return new StraightWire().setOrientation(D_DOWN);
    },
    rightLeft: function() {
      return new StraightWire().setOrientation(D_LEFT);
    },
    downRight: function() {
      return new CurvedWire();
    },
    leftDown: function() {
      return new CurvedWire().setOrientation(D_RIGHT);
    },
    upLeft: function() {
      return new CurvedWire().setOrientation(D_DOWN);
    },
    rightUp: function() {
      return new CurvedWire().setOrientation(D_LEFT);
    },
    downLeft: function() {
      return new CurvedWire();
    },
    leftUp: function() {
      return new CurvedWire().setOrientation(D_RIGHT).mirror();
    },
    upRight: function() {
      return new CurvedWire().setOrientation(D_DOWN).mirror();
    },
    rightDown: function() {
      return new CurvedWire().setOrientation(D_LEFT).mirror();
    }
  };

  PacketGenerator = (function(_super) {

    __extends(PacketGenerator, _super);

    function PacketGenerator(data) {
      this.data = data;
      PacketGenerator.__super__.constructor.apply(this, arguments);
      this.outputs = [D_UP];
      this.shouldTickFn = function(t) {
        return true;
      };
    }

    PacketGenerator.prototype.setShouldTickFn = function(fn) {
      this.shouldTickFn = fn;
      return this;
    };

    PacketGenerator.prototype.render = function(el) {
      return el.text('G');
    };

    PacketGenerator.prototype.tick = function(t) {
      var b, i, output, pkt, _i, _len, _ref;
      if (!this.shouldTickFn(t)) {
        return null;
      }
      _ref = this.outputs;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        output = _ref[i];
        b = this.block.dir(output);
        pkt = new Packet(this.data);
        if ((b != null) && (b.part != null) && b.part.acceptsPacket(oppositeDir(output), pkt)) {
          b.part.pushPacket(oppositeDir(output), pkt);
        }
      }
      return true;
    };

    return PacketGenerator;

  })(Part);

  Accumulator = (function(_super) {

    __extends(Accumulator, _super);

    Accumulator.use(PacketHandlerTrait);

    function Accumulator(inc) {
      this.inc = inc;
      Accumulator.__super__.constructor.apply(this, arguments);
      this.inputs = [D_DOWN];
      this.outputs = [D_UP];
    }

    Accumulator.prototype.render = function(el) {
      el.text('+');
      return el.css('color', this.packets.length > 0 || this.packetQueue.length > 0 ? '#0a0' : '#000');
    };

    Accumulator.prototype.acceptsPacket = function(dir, pkt) {
      return this.hasInput(dir) && pkt.type() === 'number';
    };

    Accumulator.prototype.handlePackets = function() {
      var b, pkt;
      while (this.packets.length > 0) {
        pkt = this.packets.shift();
        b = this.block.dir(this.outputs[0]);
        if ((b != null) && (b.part != null) && b.part.acceptsPacket(oppositeDir(this.outputs[0]), pkt)) {
          pkt.data = pkt.data + this.inc;
          b.part.pushPacket(oppositeDir(this.outputs[0]), pkt);
        }
      }
      return true;
    };

    return Accumulator;

  })(Part);

  ConsoleLogger = (function(_super) {

    __extends(ConsoleLogger, _super);

    ConsoleLogger.use(PacketHandlerTrait);

    function ConsoleLogger(key) {
      this.key = key;
      ConsoleLogger.__super__.constructor.apply(this, arguments);
      this.inputs = [D_UP, D_RIGHT, D_DOWN, D_LEFT];
    }

    ConsoleLogger.prototype.render = function(el) {
      return el.text('>');
    };

    ConsoleLogger.prototype.handlePackets = function() {
      var pkt;
      while (this.packets.length > 0) {
        pkt = this.packets.shift();
        console.log("ConsoleLogger(" + this.key + "): " + (pkt.toString()));
      }
      return true;
    };

    return ConsoleLogger;

  })(Part);

  ArrayBuilder = (function(_super) {

    __extends(ArrayBuilder, _super);

    ArrayBuilder.use(PacketHandlerTrait);

    function ArrayBuilder(size) {
      this.size = size;
      ArrayBuilder.__super__.constructor.apply(this, arguments);
      this.inputs = [D_DOWN];
      this.outputs = [D_UP];
    }

    ArrayBuilder.prototype.render = function(el) {
      return el.html("A<sup>" + (this.packets.length + this.packetQueue.length) + "</sup>");
    };

    ArrayBuilder.prototype.handlePackets = function() {
      var arr, b, output, p, pkt;
      if (this.packets.length >= this.size) {
        output = this.outputs[0];
        b = this.block.dir(output);
        arr = (function() {
          var _i, _len, _ref, _results;
          _ref = this.packets.splice(0, this.size);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(p.data);
          }
          return _results;
        }).call(this);
        pkt = new Packet(arr);
        if ((b != null) && (b.part != null) && b.part.acceptsPacket(oppositeDir(output), pkt)) {
          return b.part.pushPacket(oppositeDir(output), pkt);
        }
      }
    };

    return ArrayBuilder;

  })(Part);

  DuhWinning = (function(_super) {

    __extends(DuhWinning, _super);

    DuhWinning.use(PacketHandlerTrait);

    function DuhWinning() {
      DuhWinning.__super__.constructor.apply(this, arguments);
      this.inputs = [];
    }

    DuhWinning.prototype.render = function(el) {
      return el.text('W');
    };

    DuhWinning.prototype.isWinner = function(pkt) {
      return false;
    };

    DuhWinning.prototype.acceptsPacket = function(dir, pkt) {
      return this.hasInput(dir) && this.isWinner(pkt);
    };

    DuhWinning.prototype.handlePackets = function() {
      var pkt;
      if (this.packets.length > 0) {
        pkt = this.packets.shift();
        alert('You win!');
        return window.pauseLoop();
      }
    };

    return DuhWinning;

  })(Part);

  window.StraightWire = StraightWire;

  window.CurvedWire = CurvedWire;

  window.WireFactory = WireFactory;

  window.PacketGenerator = PacketGenerator;

  window.Accumulator = Accumulator;

  window.ConsoleLogger = ConsoleLogger;

  window.ArrayBuilder = ArrayBuilder;

  window.DuhWinning = DuhWinning;

}).call(this);
