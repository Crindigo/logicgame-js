// Generated by CoffeeScript 1.3.3
(function() {
  var BLOCKS, BaseObject, BlockInfo, COLS, D_DOWN, D_LEFT, D_RIGHT, D_UP, IntervalID, PACKETS, PARTS, PART_UNIQ, Packet, Part, Pos, ROWS, SPRITES, TICK, buildPartCache, createTable, gameLoop, gameTick, getBlock, getBlockDiv, oppositeDir, pauseLoop, renderTable,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ROWS = 10;

  COLS = 10;

  D_UP = 0;

  D_RIGHT = 1;

  D_DOWN = 2;

  D_LEFT = 3;

  BLOCKS = [];

  PARTS = [];

  PACKETS = [];

  SPRITES = {
    wire_up: 0x257D,
    wire_right: 0x257E,
    wire_down: 0x257F,
    wire_left: 0x257C,
    wire_down_right: 0x250E,
    wire_left_down: 0x2511,
    wire_up_left: 0x251A,
    wire_right_up: 0x2515,
    wire_down_left: 0x2512,
    wire_left_up: 0x2519,
    wire_up_right: 0x2516,
    wire_right_down: 0x250D
  };

  buildPartCache = function() {
    var block;
    window.PARTS = (function() {
      var _i, _len, _ref, _results;
      _ref = window.BLOCKS;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        if (block.part != null) {
          _results.push(block.part);
        }
      }
      return _results;
    })();
    return true;
  };

  gameTick = function(t) {
    var part, _i, _j, _len, _len1, _ref, _ref1;
    _ref = window.PARTS;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      part = _ref[_i];
      part.ticked = false;
    }
    _ref1 = window.PARTS;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      part = _ref1[_j];
      part.tick(t);
      part.ticked = true;
    }
    return true;
  };

  TICK = 0;

  window.TICKTIME = 1000;

  IntervalID = 0;

  gameLoop = function() {
    buildPartCache();
    renderTable();
    return IntervalID = setInterval(function() {
      gameTick(++TICK);
      renderTable();
      return true;
    }, TICKTIME);
  };

  pauseLoop = function() {
    return clearInterval(IntervalID);
  };

  oppositeDir = function(d) {
    switch (d) {
      case D_UP:
        return D_DOWN;
      case D_RIGHT:
        return D_LEFT;
      case D_DOWN:
        return D_UP;
      case D_LEFT:
        return D_RIGHT;
      default:
        return null;
    }
  };

  createTable = function() {
    var b, block, i, size, _i;
    size = window.ROWS * window.COLS;
    for (i = _i = 0; 0 <= size ? _i < size : _i > size; i = 0 <= size ? ++_i : --_i) {
      block = $('<div></div>');
      block.addClass('block');
      block.attr('id', "block" + i);
      $('#table_container').append(block);
      b = new BlockInfo(block, new Pos(i % window.COLS, Math.floor(i / window.COLS)));
      window.BLOCKS.push(b);
    }
    return true;
  };

  renderTable = function() {
    var block, _i, _len, _ref;
    _ref = window.BLOCKS;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      block = _ref[_i];
      block.render();
    }
    return true;
  };

  getBlock = function(x, y) {
    return window.BLOCKS[y * window.COLS + x];
  };

  getBlockDiv = function(x, y) {
    return $("#block" + (y * window.COLS + x));
  };

  BaseObject = (function() {

    function BaseObject() {}

    BaseObject.use = function(obj) {
      var key, value;
      for (key in obj) {
        value = obj[key];
        this.prototype[key] = value;
      }
      return this;
    };

    return BaseObject;

  })();

  Pos = (function() {

    function Pos(x, y) {
      this.x = x;
      this.y = y;
    }

    Pos.prototype.up = function() {
      if (this.y === 0) {
        return null;
      } else {
        return new Pos(this.x, this.y - 1);
      }
    };

    Pos.prototype.down = function() {
      if (this.y === window.ROWS - 1) {
        return null;
      } else {
        return new Pos(this.x, this.y + 1);
      }
    };

    Pos.prototype.left = function() {
      if (this.x === 0) {
        return null;
      } else {
        return new Pos(this.x - 1, this.y);
      }
    };

    Pos.prototype.right = function() {
      if (this.x === window.COLS - 1) {
        return null;
      } else {
        return new Pos(this.x + 1, this.y);
      }
    };

    Pos.prototype.dir = function(o) {
      if (!this.hasDir(o)) {
        return null;
      }
      switch (o) {
        case D_UP:
          return this.up();
        case D_RIGHT:
          return this.right();
        case D_DOWN:
          return this.down();
        case D_LEFT:
          return this.left();
        default:
          return null;
      }
    };

    Pos.prototype.hasDir = function(o) {
      switch (o) {
        case D_UP:
          return this.y > 0;
        case D_RIGHT:
          return this.x < (window.COLS - 1);
        case D_DOWN:
          return this.y < (window.ROWS - 1);
        case D_LEFT:
          return this.x > 0;
        default:
          return false;
      }
    };

    Pos.prototype.index = function() {
      return this.y * window.COLS + this.x;
    };

    return Pos;

  })();

  BlockInfo = (function() {

    function BlockInfo(element, pos) {
      this.element = element;
      this.pos = pos;
      this.part = null;
    }

    BlockInfo.prototype.render = function() {
      if (this.part != null) {
        return this.part.render(this.element);
      }
    };

    BlockInfo.prototype.dir = function(o) {
      var p;
      p = this.pos.dir(o);
      if (p != null) {
        return window.BLOCKS[p.index()];
      } else {
        return null;
      }
    };

    BlockInfo.prototype.setPart = function(p) {
      this.part = p;
      return p.block = this;
    };

    return BlockInfo;

  })();

  Packet = (function() {

    function Packet(data) {
      this.data = data;
    }

    Packet.prototype.toString = function() {
      return String(this.data);
    };

    Packet.prototype.type = function() {
      var typ;
      typ = typeof this.data;
      if (typ === 'object') {
        if ($.isArray(this.data)) {
          return 'array';
        } else {
          return 'object';
        }
      } else {
        return typ;
      }
    };

    Packet.prototype.dup = function() {
      return new Packet(this.data);
    };

    return Packet;

  })();

  PART_UNIQ = 0;

  Part = (function(_super) {

    __extends(Part, _super);

    Part.prototype.uniqid = 0;

    Part.prototype.packets = [];

    Part.prototype.packetQueue = [];

    Part.prototype.orientation = 0;

    Part.prototype.mirrored = false;

    Part.prototype.inputs = [];

    Part.prototype.outputs = [];

    Part.prototype.block = null;

    Part.prototype.ticked = false;

    function Part() {
      this.uniqid = ++PART_UNIQ;
    }

    Part.prototype.render = function(el) {};

    Part.prototype.isVertical = function(o) {
      if (!(o != null)) {
        o = this.orientation;
      }
      return o === D_UP || o === D_DOWN;
    };

    Part.prototype.isHorizontal = function(o) {
      return !this.isVertical(o);
    };

    Part.prototype.setOrientation = function(o) {
      var cur, i, input, output, rot, _i, _j, _len, _len1, _ref, _ref1;
      cur = this.orientation;
      if (cur === o || o < 0 || o > 3) {
        return this;
      }
      rot = o < cur ? 4 - (cur - o) : o - cur;
      _ref = this.inputs;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        input = _ref[i];
        this.inputs[i] = (input + rot) % 4;
      }
      _ref1 = this.outputs;
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        output = _ref1[i];
        this.outputs[i] = (output + rot) % 4;
      }
      this.orientation = o;
      return this;
    };

    Part.prototype.mirror = function() {
      var i, input, output, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.inputs;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        input = _ref[i];
        if ((this.isVertical() && this.isHorizontal(input)) || (this.isHorizontal() && this.isVertical(input))) {
          this.inputs[i] = oppositeDir(input);
        }
      }
      _ref1 = this.outputs;
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        output = _ref1[i];
        if ((this.isVertical() && this.isHorizontal(output)) || (this.isHorizontal() && this.isVertical(output))) {
          this.outputs[i] = oppositeDir(output);
        }
      }
      this.mirrored = !this.mirrored;
      return this;
    };

    Part.prototype.hasInput = function(dir) {
      return __indexOf.call(this.inputs, dir) >= 0;
    };

    Part.prototype.acceptsPacket = function(dir, pkt) {
      return this.hasInput(dir);
    };

    Part.prototype.pushPacket = function(dir, pkt) {
      if (this.ticked) {
        return this.packets.push(pkt);
      } else {
        return this.packetQueue.push(pkt);
      }
    };

    return Part;

  })(BaseObject);

  window.ROWS = ROWS;

  window.COLS = COLS;

  window.D_UP = D_UP;

  window.D_RIGHT = D_RIGHT;

  window.D_DOWN = D_DOWN;

  window.D_LEFT = D_LEFT;

  window.BLOCKS = BLOCKS;

  window.PARTS = PARTS;

  window.PACKETS = PACKETS;

  window.SPRITES = SPRITES;

  window.gameLoop = gameLoop;

  window.pauseLoop = pauseLoop;

  window.oppositeDir = oppositeDir;

  window.createTable = createTable;

  window.getBlock = getBlock;

  window.getBlockDiv = getBlockDiv;

  window.BaseObject = BaseObject;

  window.Pos = Pos;

  window.Packet = Packet;

  window.BlockInfo = BlockInfo;

  window.Part = Part;

}).call(this);
